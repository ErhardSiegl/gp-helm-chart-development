autoUnseal:
  creds:  #REPLACE ME
metrics:
  username: #REPLACE ME
  password: #REPLACE ME
vault:
  global:
    openshift: true
    tlsDisable: false
  ui:
    enabled: true
  injector:
    enabled: true
    resources:
      requests:
        memory: '100Mi'
        cpu: '100m'
      limits:
        memory: '150Mi'
        cpu: '150m'
    certs:
      secretName: 'injector-tls'
    webhook:
      annotations:
        cert-manager.io/inject-ca-from: gp-vault/injector-certificate
    extraEnvironmentVars:
      AGENT_INJECT_TLS_MIN_VERSION: tls13
  server:
    extraEnvironmentVars:
      VAULT_CACERT: /vault/userconfig/internal-certs/ca.crt
    standalone:
      enabled: false
    auditStorage:
      enabled: true
    readinessProbe:
      path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
    livenessProbe:
      enabled: true
    affinity: |
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - {{ template "vault.name" . }}
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - "{{ .Release.Name }}"
            topologyKey: kubernetes.io/hostname
    ha:
      enabled: true
      disruptionBudget:
        maxUnavailable: 1
      raft:
        enabled: true
        setNodeId: true
        config: |
          ui = true
          disable_mlock = true  # necessary with integrated storage to play nice with the used BoltDB (may cause OOM if vault's dataset grows large), but causes additional vulnerability to memory attacks! -> disable swaps in OS!
          service_registration "kubernetes" {} # to get the 'active' kubernetes label on the active server pod for scheduling/routing
          listener "tcp" {
            address = "[::]:8200"
            cluster_address = "[::]:8201"
            tls_cert_file = "/vault/userconfig/internal-certs/tls.crt"
            tls_key_file = "/vault/userconfig/internal-certs/tls.key"
            tls_client_ca_file = "/vault/userconfig/internal-certs/ca.crt"
          }
          
          storage "raft" {
            path = "/vault/data"
            retry_join {
              leader_api_addr = "https://vault-0.vault-internal:8200"
              leader_tls_servername = "vault-0.vault-internal"
              leader_ca_cert_file = "/vault/userconfig/internal-certs/ca.crt"
              leader_client_cert_file = "/vault/userconfig/internal-certs/tls.crt"
              leader_client_key_file = "/vault/userconfig/internal-certs/tls.key"
            }
            retry_join {
              leader_api_addr = "https://vault-1.vault-internal:8200"
              leader_tls_servername = "vault-1.vault-internal"
              leader_ca_cert_file = "/vault/userconfig/internal-certs/ca.crt"
              leader_client_cert_file = "/vault/userconfig/internal-certs/tls.crt"
              leader_client_key_file = "/vault/userconfig/internal-certs/tls.key"
            }
            retry_join {
              leader_api_addr = "https://vault-2.vault-internal:8200"
              leader_tls_servername = "vault-2.vault-internal"
              leader_ca_cert_file = "/vault/userconfig/internal-certs/ca.crt"
              leader_client_cert_file = "/vault/userconfig/internal-certs/tls.crt"
              leader_client_key_file = "/vault/userconfig/internal-certs/tls.key"
            }
            autopilot {
              cleanup_dead_servers = "true"
              last_contact_threshold = "5s"
              last_contact_failure_threshold = "10m"
              max_trailing_logs = 1024
              min_quorum = 2
              server_stabilization_time = "10s"
            }
          }
          seal "gcpckms" {
            credentials = "/vault/userconfig/unseal-creds/creds.json"
            project = "gepaplexx"
            region = "europe-west6"
            key_ring = "gepaplexx-play-keyring"
            crypto_key = "vault-key"
            disabled = "false"
          }
          telemetry {
            disable_hostname = true #It is recommended to also enable the option disable_hostname to avoid having prefixed metrics with hostname.
            prometheus_retention_time = "12h" 
          }
    resources:
      requests:
        memory: '100Mi'
      limits:
        memory: '150Mi'
    volumes:
      - name: internal-certs
        secret:
          secretName: server-tls
          optional: false
      - name: unseal-creds
        secret:
          secretName: gcp-creds
          optional: false
    volumeMounts:
      - mountPath: /vault/userconfig/internal-certs
        name: internal-certs
        readOnly: true
      - mountPath: /vault/userconfig/unseal-creds
        name: unseal-creds
        readOnly: true
