monitoring:
  defaultRules:
    create: false
  grafana:
    adminPassword: "changeme"
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        nginx.ingress.kubernetes.io/rewrite-target: /
      hosts:
        - grafana.infra.gepaplexx.com
      tls:
        - secretName: grafana-general-tls
          hosts:
            - grafana.infra.gepaplexx.com
    grafana.ini:
      server:
        domain: grafana.infra.gepaplexx.com
        root_url: "https://grafana.infra.gepaplexx.com"
      auth.github:
        enabled: true
        allow_sign_up: true
        scopes: user:email,read:org
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        allowed_organizations: gepaplexx
        client_id: "add-me-to-inventory"
        client_secret: "add-me-to-inventory"

  prometheus:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
      hosts:
        - prometheus.infra.gepaplexx.com
      tls:
        - secretName: prometheus-general-tls
          hosts:
            - prometheus.infra.gepaplexx.com
    prometheusSpec:
      containers: # Patch prometheus startup probe to give the container time to replay the WAL from disk
        - name: prometheus
          startupProbe:
            failureThreshold: 120
            periodSeconds: 30
          livenessProbe:
            failureThreshold: 10
            periodSeconds: 90
          readinessProbe:
            failureThreshold: 120
            periodSeconds: 30
      enableRemoteWriteReceiver: true
      retentionSize: 50GiB  # TODO muss erh√∂ht werden, wenn Cluster neu aufgesetzt wird mit mehr Plattenplatz.
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            accessModes: [ "ReadWriteMany" ]
            resources:
              requests:
                storage: 50Gi
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      additionalServiceMonitors:
        namespaceSelector:
          any: "true"
  alertmanager:
    ingress:
      enabled: false
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
      hosts:
        - alertmanager.infra.gepaplexx.com
      tls:
        - secretName: alertmanager-tls
          hosts:
            - alertmanager.infra.gepaplexx.com

  kubeScheduler:
    enabled: false # wird in microk8s anders gehandhabt
  kubeControllerManager:
    enabled: false # wird in microk8s anders gehandhabt
  kubeProxy:
    enabled: false # wird in microk8s anders gehandhabt

